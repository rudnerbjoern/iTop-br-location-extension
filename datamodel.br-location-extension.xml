<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.7">
    <!--
    * @license     https://www.gnu.org/licenses/gpl-3.0.en.html
    -->
    <classes>
        <class id="Location" _delta="must_exist">
            <properties>
                <naming>
                    <attributes>
                        <attribute id="name" _delta="delete"/>
                        <attribute id="nicename" _delta="force"/>
                    </attributes>
                </naming>
            </properties>
            <fields>
                <field id="nicename" xsi:type="AttributeString" _delta="define">
                    <sql>nicename</sql>
                    <default_value>unknown</default_value>
                    <is_null_allowed>false</is_null_allowed>
                </field>
                <field id="type" xsi:type="AttributeEnum" _delta="define">
                    <sql>type</sql>
                    <is_null_allowed>true</is_null_allowed>
                    <display_style>list</display_style>
                    <values>
                        <value id="1">1</value>
                        <value id="2">2</value>
                        <value id="3">3</value>
                        <value id="4">4</value>
                        <value id="5">5</value>
                    </values>
                </field>
                <field id="locationtype_id" xsi:type="AttributeExternalKey" _delta="force">
                    <sql>locationtype_id</sql>
                    <target_class>LocationType</target_class>
                    <is_null_allowed>true</is_null_allowed>
                    <on_target_delete>DEL_MANUAL</on_target_delete>
                </field>
                <field id="parent_id" xsi:type="AttributeHierarchicalKey" _delta="define_if_not_exists">
                    <sql>parent_id</sql>
                    <filter>
                        <![CDATA[SELECT Location AS l WHERE (l.type < :this->type) AND l.org_id = :this->org_id]]>
                    </filter>
                    <dependencies>
                        <attribute id="org_id" />
                        <attribute id="type" />
                    </dependencies>
                    <is_null_allowed>true</is_null_allowed>
                    <on_target_delete>DEL_AUTO</on_target_delete>
                </field>
                <field id="locations_list" xsi:type="AttributeLinkedSet" _delta="define_if_not_exists">
                    <linked_class>Location</linked_class>
                    <ext_key_to_me>parent_id</ext_key_to_me>
                </field>
            </fields>
            <methods>
                <method id="GetAttributeFlags" _delta="define">
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-DBObject</type>
                    <code>
                        <![CDATA[public function GetAttributeFlags($sAttCode, &$aReasons = array(), $sTargetState = '')
					    {
						    // Force the computed field to be read-only, preventing it to be written
						    if (($sAttCode == 'nicename'))
							    return(OPT_ATT_READONLY | parent::GetAttributeFlags($sAttCode, $aReasons, $sTargetState));
						    return parent::GetAttributeFlags($sAttCode, $aReasons, $sTargetState);
					    }]]>
                    </code>
                </method>
                <method id="GetInitialStateAttributeFlags" _delta="define">
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-DBObject</type>
                    <code>
                        <![CDATA[public function GetInitialStateAttributeFlags($sAttCode, &$aReasons = array())
					    {
						    // Hide the calculated field in object creation form
						    if (($sAttCode == 'nicename'))
							    return(OPT_ATT_HIDDEN | parent::GetInitialStateAttributeFlags($sAttCode, $aReasons));
						    return parent::GetInitialStateAttributeFlags($sAttCode, $aReasons);
					    }]]>
                    </code>
                </method>
                <method id="OnInsert" _delta="define">
                    <static>false</static>
                    <access>protected</access>
                    <type>Overload-DBObject</type>
                    <code>
                        <![CDATA[protected function OnInsert()
					    {
						    $this->SetNicename();
                            parent::OnInsert();
					    }]]>
                    </code>
                </method>
                <method id="OnUpdate" _delta="define">
                    <static>false</static>
                    <access>protected</access>
                    <type>Overload-DBObject</type>
                    <code>
                        <![CDATA[protected function OnUpdate()
					    {
						    $this->SetNicename();
                            parent::OnUpdate();
					    }]]>
                    </code>
                </method>
                <method id="SetNicename" _delta="define">
                    <static>false</static>
                    <access>protected</access>
                    <type>Overload-DBObject</type>
                    <code>
                        <![CDATA[protected function SetNicename()
					    {
                            // read the new value of the Name
                            $sName = $this->Get('name');

                            // failsafe, the field cannot be empty
                            $sNicename = $sName;

                            // get Nicename from Parent
                            $sParentNicename = '';

                            if (!(empty($this->Get('parent_id'))))
							{
								// try to get the parent Location
								$oParentLocation = MetaModel::GetObject('Location', $this->Get('parent_id'));
								if (is_object($oParentLocation))
								{
                                    $sParentNicename = $oParentLocation->Get('nicename');
                                    $sNicename = $sParentNicename.'/'.$sName;
								}
							}

                            $this->Set('nicename', $sNicename);

                            // Cascade to clients
							if (!(empty($this->Get('locations_list'))))
							{
                                $sOQL = "SELECT Location WHERE parent_id = :parent";
                                $oClientSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('parent' => $this->Get('id'),));

                                // Update all clients
                                while ($oClient = $oClientSet->Fetch())
                                {
                                    $oClient->SetNicename();
                                    $oClient->DBUpdate();
                                }
					    }]]>
                    </code>
                </method>
            </methods>
            <presentation>
                <details>
                    <items>
                        <item id="type" _delta="force">
                            <rank>25</rank>
                        </item>
                        <item id="parent_id" _delta="define_if_not_exists">
                            <rank>35</rank>
                        </item>
                        <item id="locations_list" _delta="define_if_not_exists">
                            <rank>100</rank>
                        </item>
                    </items>
                </details>
                <default_search>
                    <items>
                        <item id="type" _delta="force">
                            <rank>40</rank>
                        </item>
                    </items>
                </default_search>
                <list>
                    <items>
                        <item id="type" _delta="force">
                            <rank>15</rank>
                        </item>
                        <item id="parent_id" _delta="define_if_not_exists">
                            <rank>25</rank>
                        </item>
                    </items>
                </list>
            </presentation>
        </class>
    </classes>
</itop_design>
