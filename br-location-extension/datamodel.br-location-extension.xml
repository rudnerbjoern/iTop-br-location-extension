<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="3.1">
    <!--
    * @license     https://www.gnu.org/licenses/gpl-3.0.en.html
    * @version     2024-10-21
    -->
    <classes>
        <class id="Location" _delta="must_exist">
            <properties>
                <naming>
                    <attributes>
                        <attribute id="name" _delta="delete_if_exists" />
                        <attribute id="nicename" _delta="force" />
                    </attributes>
                </naming>
            </properties>
            <fields>
                <field id="nicename" xsi:type="AttributeString" _delta="force">
                    <sql>nicename</sql>
                    <default_value>unknown</default_value>
                    <is_null_allowed>false</is_null_allowed>
                </field>
                <field id="type" xsi:type="AttributeEnum" _delta="force">
                    <sql>type</sql>
                    <is_null_allowed>true</is_null_allowed>
                    <display_style>list</display_style>
                    <values>
                        <value id="1">
                            <code>1</code>
                        </value>
                        <value id="2">
                            <code>2</code>
                        </value>
                        <value id="3">
                            <code>3</code>
                        </value>
                        <value id="4">
                            <code>4</code>
                        </value>
                        <value id="5">
                            <code>5</code>
                        </value>
                    </values>
                </field>
                <field id="parent_id" xsi:type="AttributeHierarchicalKey" _delta="force">
                    <sql>parent_id</sql>
                    <filter>
                        <![CDATA[SELECT Location AS l WHERE (l.type < :this->type) AND l.org_id = :this->org_id]]>
                    </filter>
                    <dependencies>
                        <attribute id="org_id" />
                        <attribute id="type" />
                    </dependencies>
                    <is_null_allowed>true</is_null_allowed>
                    <on_target_delete>DEL_AUTO</on_target_delete>
                </field>
                <field id="locations_list" xsi:type="AttributeLinkedSet" _delta="force">
                    <linked_class>Location</linked_class>
                    <ext_key_to_me>parent_id</ext_key_to_me>
                </field>
                <field id="description" xsi:type="AttributeText" _delta="define">
                    <sql>description</sql>
                    <default_value />
                    <is_null_allowed>true</is_null_allowed>
                </field>
            </fields>
            <methods>
                <method id="GetAttributeFlags" _delta="define">
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-DBObject</type>
                    <code>
                        <![CDATA[public function GetAttributeFlags($sAttCode, &$aReasons = array(), $sTargetState = '')
					    {
						    // Force the computed field to be read-only, preventing it to be written
						    if (($sAttCode == 'nicename'))
							    return(OPT_ATT_READONLY | parent::GetAttributeFlags($sAttCode, $aReasons, $sTargetState));
						    return parent::GetAttributeFlags($sAttCode, $aReasons, $sTargetState);
					    }]]>
                    </code>
                </method>
                <method id="GetInitialStateAttributeFlags" _delta="define">
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-DBObject</type>
                    <code>
                        <![CDATA[public function GetInitialStateAttributeFlags($sAttCode, &$aReasons = array())
					    {
						    // Hide the calculated field in object creation form
						    if (($sAttCode == 'nicename'))
							    return(OPT_ATT_HIDDEN | parent::GetInitialStateAttributeFlags($sAttCode, $aReasons));
						    return parent::GetInitialStateAttributeFlags($sAttCode, $aReasons);
					    }]]>
                    </code>
                </method>
                <method id="OnInsert" _delta="define">
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-DBObject</type>
                    <code>
                        <![CDATA[public function OnInsert()
					    {
						    $this->SetNicename();
                            parent::OnInsert();
					    }]]>
                    </code>
                </method>
                <method id="OnUpdate" _delta="define">
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-DBObject</type>
                    <code>
                        <![CDATA[public function OnUpdate()
					    {
                            $aChanges = $this->ListChanges();
                            if (array_key_exists('name', $aChanges) || array_key_exists('parent_id', $aChanges))
                            {
                                // record in the Location memory object that the name was changed
                                $this->i_NameChanged = true;
                                $this->SetNicename();
                            }
                            parent::OnUpdate();
					    }]]>
                    </code>
                </method>
                <method id="AfterUpdate" _delta="define">
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-DBObject</type>
                    <code>
                        <![CDATA[public function AfterUpdate()
					    {
                            // The Location is updated in DB and Name was changed,
                            if (isset($this->i_NameChanged))
                            {
                                // we need to rename the childs
                                $this->UpdateChilds();
                            }
                            parent::AfterUpdate();
					    }]]>
                    </code>
                </method>
                <method id="SetNicename" _delta="define">
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-DBObject</type>
                    <code>
                        <![CDATA[public function SetNicename()
					    {
                            // read the new value of the Name
                            $sName = $this->Get('name');

                            // failsafe, the field cannot be empty
                            $sNicename = $sName;

                            // get Nicename from Parent
                            $sParentNicename = '';

                            if (!(empty($this->Get('parent_id'))))
							{
								// try to get the parent Location
								$oParentLocation = MetaModel::GetObject('Location', $this->Get('parent_id'));
								if (is_object($oParentLocation))
								{
                                    $sParentNicename = $oParentLocation->Get('nicename');
                                    $sNicename = $sParentNicename.'/'.$sName;
								}
							}

                            $this->Set('nicename', $sNicename);
					    }]]>
                    </code>
                </method>
                <method id="UpdateChilds" _delta="define">
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-DBObject</type>
                    <code>
                        <![CDATA[public function UpdateChilds()
					    {
                            if (!(empty($this->Get('locations_list'))))
							{
                                // Cascade to Child Locations
                                $oChildSet = $this->Get('locations_list');
                                while($oChild = $oChildSet->Fetch())
                                {
                                    $oChild->SetNicename();
                                    $oChild->i_NameChanged = true;
                                    $oChild->DBUpdate();
                                    if (!(empty($oChild->Get('locations_list'))))
                                    {
                                        // Cascade to further childs
                                        $oChild->UpdateChilds();
                                    }
                                }
                            }
					    }]]>
                    </code>
                </method>
            </methods>
            <presentation>
                <details>
                    <items>
                        <item id="type" _delta="force">
                            <rank>25</rank>
                        </item>
                        <item id="parent_id" _delta="force">
                            <rank>35</rank>
                        </item>
                        <item id="description" _delta="define">
                            <rank>75</rank>
                        </item>
                        <item id="locations_list" _delta="force">
                            <rank>100</rank>
                        </item>
                    </items>
                </details>
                <default_search>
                    <items>
                        <item id="type" _delta="force">
                            <rank>40</rank>
                        </item>
                    </items>
                </default_search>
                <list>
                    <items>
                        <item id="type" _delta="force">
                            <rank>15</rank>
                        </item>
                        <item id="parent_id" _delta="force">
                            <rank>25</rank>
                        </item>
                        <item id="description" _delta="force">
                            <rank>75</rank>
                        </item>
                    </items>
                </list>
            </presentation>
        </class>
    </classes>
</itop_design>
