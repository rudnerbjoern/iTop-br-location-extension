<?xml version="1.0" encoding="UTF-8"?>
<itop_design version="3.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://rudnerbjoern.github.io/iTop-schema/3.2/itop_design.xsd">
    <!--
 * @copyright   Copyright (C) 2024-2025 BjÃ¶rn Rudner
 * @license     https://www.gnu.org/licenses/gpl-3.0.en.html
 * @version     2025-06-12
    -->
    <classes>
        <class id="Location" _delta="must_exist">
            <properties>
                <naming>
                    <attributes>
                        <attribute id="name" _delta="delete_if_exists" />
                        <attribute id="nicename" _delta="force" />
                    </attributes>
                </naming>
            </properties>
            <fields>
                <field id="nicename" xsi:type="AttributeString" _delta="force">
                    <sql>nicename</sql>
                    <default_value>unknown</default_value>
                    <is_null_allowed>false</is_null_allowed>
                </field>
                <field id="type" xsi:type="AttributeEnum" _delta="force">
                    <sql>type</sql>
                    <is_null_allowed>true</is_null_allowed>
                    <display_style>list</display_style>
                    <values>
                        <value id="1">
                            <code>1</code>
                        </value>
                        <value id="2">
                            <code>2</code>
                        </value>
                        <value id="3">
                            <code>3</code>
                        </value>
                        <value id="4">
                            <code>4</code>
                        </value>
                        <value id="5">
                            <code>5</code>
                        </value>
                    </values>
                </field>
                <field id="parent_id" xsi:type="AttributeHierarchicalKey" _delta="force">
                    <sql>parent_id</sql>
                    <filter>
                        <![CDATA[SELECT Location AS l WHERE (l.type < :this->type) AND l.org_id = :this->org_id]]>
                    </filter>
                    <dependencies>
                        <attribute id="org_id" />
                        <attribute id="type" />
                    </dependencies>
                    <is_null_allowed>true</is_null_allowed>
                    <on_target_delete>DEL_AUTO</on_target_delete>
                </field>
                <field id="locations_list" xsi:type="AttributeLinkedSet" _delta="force">
                    <linked_class>Location</linked_class>
                    <ext_key_to_me>parent_id</ext_key_to_me>
                </field>
                <field id="description" xsi:type="AttributeText" _delta="define">
                    <sql>description</sql>
                    <default_value />
                    <is_null_allowed>true</is_null_allowed>
                </field>
            </fields>
            <event_listeners>
                <event_listener id="EvtSetInitialNicenameAttributeFlags">
                    <event>EVENT_DB_SET_INITIAL_ATTRIBUTES_FLAGS</event>
                    <rank>10</rank>
                    <callback>EvtSetInitialNicenameAttributeFlags</callback>
                </event_listener>
                <event_listener id="EvtSetNicenameAttributeFlags">
                    <event>EVENT_DB_SET_ATTRIBUTES_FLAGS</event>
                    <rank>10</rank>
                    <callback>EvtSetNicenameAttributeFlags</callback>
                </event_listener>
                <event_listener id="EvtBeforeNicenameWrite">
                    <event>EVENT_DB_BEFORE_WRITE</event>
                    <rank>10</rank>
                    <callback>EvtBeforeNicenameWrite</callback>
                </event_listener>
                <event_listener id="EvtAfterNicenameWrite">
                    <event>EVENT_DB_AFTER_WRITE</event>
                    <rank>10</rank>
                    <callback>EvtAfterNicenameWrite</callback>
                </event_listener>
            </event_listeners>
            <methods>
                <method id="EvtSetInitialNicenameAttributeFlags">
                    <static>false</static>
                    <access>public</access>
                    <type>EventListener</type>
                    <code><![CDATA[
    public function EvtSetInitialNicenameAttributeFlags(Combodo\iTop\Service\Events\EventData $oEventData)
    {
        $this->ForceInitialAttributeFlags('nicename', OPT_ATT_HIDDEN);
    }
  ]]></code>
                </method>
                <method id="EvtSetNicenameAttributeFlags">
                    <static>false</static>
                    <access>public</access>
                    <type>EventListener</type>
                    <code><![CDATA[
    public function EvtSetNicenameAttributeFlags(Combodo\iTop\Service\Events\EventData $oEventData)
    {
        $this->ForceAttributeFlags('nicename', OPT_ATT_READONLY);
    }
  ]]></code>
                </method>
                <method id="EvtBeforeNicenameWrite">
                    <static>false</static>
                    <access>public</access>
                    <type>EventListener</type>
                    <code><![CDATA[
    public function EvtBeforeNicenameWrite(Combodo\iTop\Service\Events\EventData $oEventData)
    {
        if ($oEventData->Get('is_new')) {
            $this->SetNicename();
        }
        else {
            $aChanges = $this->ListChanges();
            if (array_key_exists('name', $aChanges) || array_key_exists('parent_id', $aChanges))
            {
                // record in the Location memory object that the name was changed
                $this->i_NameChanged = true;
                $this->SetNicename();
            }
        }
    }
  ]]></code>
                </method>
                <method id="EvtAfterNicenameWrite">
                    <static>false</static>
                    <access>public</access>
                    <type>EventListener</type>
                    <code><![CDATA[
    public function EvtAfterNicenameWrite(Combodo\iTop\Service\Events\EventData $oEventData)
    {
        // The Location is updated in DB and Name was changed,
        if (isset($this->i_NameChanged))
        {
            // we need to rename the children
            $this->UpdateChilds();
        }
    }
  ]]></code>
                </method>
                <method id="SetNicename" _delta="define">
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-DBObject</type>
                    <code><![CDATA[
    public function SetNicename()
    {
        // read the new value of the Name
        $sName = $this->Get('name');

        // failsafe, the field cannot be empty
        $sNicename = $sName;

        // get Nicename from Parent
        $sParentNicename = '';

        if (!(empty($this->Get('parent_id'))))
        {
            // try to get the parent Location
            $oParentLocation = MetaModel::GetObject('Location', $this->Get('parent_id'));
            if (is_object($oParentLocation))
            {
                $sParentNicename = $oParentLocation->Get('nicename');
                $sNicename = $sParentNicename.'/'.$sName;
            }
        }

        $this->Set('nicename', $sNicename);
    }
  ]]></code>
                </method>
                <method id="UpdateChilds" _delta="define">
                    <static>false</static>
                    <access>public</access>
                    <type>Overload-DBObject</type>
                    <code><![CDATA[
    public function UpdateChilds()
    {
        if (!(empty($this->Get('locations_list'))))
        {
            // Cascade to Child Locations
            $oChildSet = $this->Get('locations_list');
            while($oChild = $oChildSet->Fetch())
            {
                $oChild->SetNicename();
                $oChild->i_NameChanged = true;
                $oChild->DBUpdate();
                if (!(empty($oChild->Get('locations_list'))))
                {
                    // Cascade to further children
                    $oChild->UpdateChilds();
                }
            }
        }
    }
  ]]></code>
                </method>
            </methods>
            <presentation>
                <details>
                    <items>
                        <item id="type" _delta="force">
                            <rank>25</rank>
                        </item>
                        <item id="parent_id" _delta="force">
                            <rank>35</rank>
                        </item>
                        <item id="description" _delta="define">
                            <rank>75</rank>
                        </item>
                        <item id="locations_list" _delta="force">
                            <rank>100</rank>
                        </item>
                    </items>
                </details>
                <default_search>
                    <items>
                        <item id="type" _delta="force">
                            <rank>40</rank>
                        </item>
                    </items>
                </default_search>
                <list>
                    <items>
                        <item id="type" _delta="force">
                            <rank>15</rank>
                        </item>
                        <item id="parent_id" _delta="force">
                            <rank>25</rank>
                        </item>
                        <item id="description" _delta="force">
                            <rank>75</rank>
                        </item>
                    </items>
                </list>
            </presentation>
        </class>
    </classes>
</itop_design>
